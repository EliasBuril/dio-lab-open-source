import pandas as pd

# Exemplo de dataset
data = {
    'temperatura': [20, 22, 25, 27, 30, 32, 35],
    'vendas': [200, 220, 250, 270, 300, 320, 350]
}

df = pd.DataFrame(data)
print(df)
import seaborn as sns
import matplotlib.pyplot as plt

sns.scatterplot(data=df, x='temperatura', y='vendas')
plt.show()
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Separando features e target
X = df[['temperatura']]
y = df['vendas']

# Dividindo dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criando e treinando o modelo
model = LinearRegression()
model.fit(X_train, y_train)

# Avaliando modelo
y_pred = model.predict(X_test)
print("RMSE:", mean_squared_error(y_test, y_pred, squared=False))
import mlflow
import mlflow.sklearn

mlflow.set_experiment("vendas_sorvete")

with mlflow.start_run():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    
    # Registrar métrica
    mlflow.log_metric("RMSE", rmse)
    
    # Registrar modelo
    mlflow.sklearn.log_model(model, "modelo_sorvete")
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler

pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('regressor', LinearRegression())
])

pipeline.fit(X_train, y_train)
# Exemplo conceitual de deploy com MLflow no Azure
import mlflow.pyfunc

model_uri = "runs:/<RUN_ID>/modelo_sorvete"
model = mlflow.pyfunc.load_model(model_uri)

# Predição em tempo real
nova_temperatura = pd.DataFrame({'temperatura': [28]})
print(model.predict(nova_temperatura))
